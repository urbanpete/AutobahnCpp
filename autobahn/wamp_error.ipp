///////////////////////////////////////////////////////////////////////////////
//
// Copyright (c) Tavendo GmbH
//
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//
///////////////////////////////////////////////////////////////////////////////

namespace autobahn {

inline wamp_error::wamp_error(
        message_type type,
        uint64_t id,
        const std::string& uri,
        const msgpack::object& details,
        const msgpack::object& args,
        const msgpack::object& kwargs,
        msgpack::zone& zone)
    : std::runtime_error(uri)
    , m_type(type)
    , m_id(id)
    , m_details(details)
    , m_args(args)
    , m_kw_args(kwargs)
{
    m_zone.swap(zone);
}

inline wamp_error::wamp_error( const wamp_error &other )
    : std::runtime_error(other.uri())
    , m_type(other.m_type)
    , m_id(other.m_id)
    , m_details(other.m_details)
    , m_args(other.m_args)
    , m_kw_args(other.m_kw_args)
{
    m_zone.swap(other.m_zone);
}

inline message_type wamp_error::type()
{
    return m_type;
}

inline uint64_t wamp_error::id() const
{
    return m_id;
}

inline const char *wamp_error::uri() const
{
    return what();
}

template<typename List>
inline List wamp_error::args() const
{
    return m_args.as<List>();
}

template<typename Map>
inline Map wamp_error::kw_args() const
{
    return m_kw_args.as<Map>();
}

template<typename T>
inline T wamp_error::details() const
{
    return m_details.as<T>();
}

} // namespace autobahn
